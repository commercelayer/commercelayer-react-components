import Parent from '#components/utils/Parent'
import PaymentMethodContext from '#context/PaymentMethodContext'
import { ChildrenFunction } from '#typings/index'
import type { StripeElementLocale } from '@stripe/stripe-js'
import { useContext, useEffect, useRef } from 'react'
import { PaymentSourceProps } from './PaymentSource'

export interface ExternalPaymentConfig {
  /**
   * Show the component. Default is false
   */
  show?: boolean
  /**
   * Use to display information about the external payment or whatever else.
   */
  customComponent?: ChildrenFunction<Omit<Props, 'customComponent'>>
  /**
   * The payment source token, as generated by the external gateway SDK. Credit Card numbers are rejected.
   */
  payment_source_token: string
}

interface Props
  extends Omit<ExternalPaymentConfig, 'payment_source_token'>,
    Pick<PaymentSourceProps, 'templateCustomerSaveToWallet'> {
  paymentSourceToken: string
  locale?: StripeElementLocale
}

export function ExternalPayment(props: Props): JSX.Element | null {
  const { setPaymentRef } = useContext(PaymentMethodContext)
  const ref = useRef<null | HTMLFormElement>(null)
  useEffect(() => {
    if (ref !== null) {
      // @ts-expect-error
      ref.current.onsubmit = async () => {
        return true
      }
      setPaymentRef({ ref })
    }
  }, [ref])
  return props?.customComponent != null && props.show ? (
    <form ref={ref}>
      <Parent>{props.customComponent}</Parent>
      {props?.templateCustomerSaveToWallet != null && (
        <Parent {...{ name: 'save_payment_source_to_customer_wallet' }}>
          {props.templateCustomerSaveToWallet}
        </Parent>
      )}
    </form>
  ) : null
}

export default ExternalPayment
